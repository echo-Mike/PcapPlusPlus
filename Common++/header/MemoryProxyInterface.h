#ifndef PCAPPP_MEMORYPROXYINTERFACE
#define PCAPPP_MEMORYPROXYINTERFACE

#include <cstdint>
#include <exception>

#include "CPP11.h"
#include "PCAPPPMemory.h"
#include "AllocatorAdapter.h"

/// @file

/**
 * \namespace pcpp
 * \brief The main namespace for the PcapPlusPlus lib
 */
namespace pcpp
{
	/**
	 * \namespace memory
	 * \brief Namespace that contains memory manipulation features
	 */
	namespace memory
	{

		template < typename T, typename Allocator, typename ProxyTag,
			typename traits = allocator_traits<Allocator> >
		class MemoryProxyInterface 
		{
		public:
			typedef typename traits::value_type value_type;
			typedef typename traits::pointer pointer;
			typedef typename traits::const_pointer const_pointer;
			typedef typename traits::reference reference;
			typedef typename traits::const_reference const_reference;

			typedef AllocatorAdapter<Allocator> Adapter;

			typedef std::size_t size;
			typedef int index;
			typedef int memory_value;
			
			typedef ProxyTag tag_type;

			virtual ~MemoryProxyInterface() {};

			inline virtual size getLength() const = 0;

			inline virtual bool isOwning() const = 0;

			inline virtual pointer get() = 0;

			inline virtual const_pointer get() const = 0;

			virtual pointer relese() = 0;

			virtual bool reset(pointer ptr, size length = 0, bool ownership = true) = 0;

			virtual operator bool() const = 0;

			inline bool isInNullState() const { return !(this->operator bool()); }

			inline virtual typename traits::allocator_type& getAllocator() const = 0;

			inline virtual void setAllocator(typename traits::allocator_type& allocator) const = 0;

			virtual bool clear() = 0;

			virtual bool reallocate(size newBufferLength, memory_value initialValue = 0) = 0;

			virtual bool append(size dataToAppendLen, memory_value initialValue = 0) = 0;

			virtual bool append(const_pointer dataToAppend, size dataToAppendLen) = 0;

			virtual bool insert(index atIndex, size dataToInsertLen, memory_value initialValue = 0) = 0;

			virtual bool insert(index atIndex, const_pointer dataToInsert, size dataToInsertLen) = 0;

			virtual bool remove(index atIndex, size numOfBytesToRemove) = 0;
		};
		
		namespace MemoryProxyTags
		{
			struct SizeAwareTag {};
			// struct SizeUnawareTag {};
			struct ContentAwareTag {};
			struct OldMemoryModelTag {};
			// struct SafeOldMemoryModelTag {};
		}

		template < typename T, typename Allocator, typename ProxyTag >
		class MemoryProxy { private: MemoryProxy() {} ~MemoryProxy() {} }; // Objects of class generated by this template can't be created. Fatal error must be raised by compiler.

	} // namespace pcpp::memory

} // namespace pcpp

#endif /* PCAPPP_MEMORYPROXYINTERFACE */